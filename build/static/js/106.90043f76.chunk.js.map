{"version":3,"sources":["views/apps/chat/ChatSidebar.js","views/apps/chat/ChatLog.js","views/apps/chat/receiverProfile.js","views/apps/chat/UserSidebar.js","views/apps/chat/Chat.js"],"names":["i","ChatSidebar","state","chatsContacts","contacts","messages","status","value","getChatContents","props","getChats","getContactChats","handleOnChange","e","setState","target","searchContacts","this","chat","chatContacts","chats","contactsArr","length","filteredContacts","chatsArr","filteredChats","renderContacts","map","contact","key","uid","onClick","handleActiveChat","markSeenAllMessages","mainSidebar","className","src","photoURL","alt","displayName","height","width","about","renderChats","Array","isArray","lastMsg","msg","slice","lastMsgDate","Date","time","lastMsgMonth","toLocaleString","month","lastMsgDay","getDate","pendingMsg","filter","isSeen","isSent","activeID","undefined","activeChatID","textContent","color","pill","size","handleUserSidebar","userImg","type","placeholder","onChange","options","wheelPropagation","React","Component","connect","chatApp","ChatLog","activeUser","activeChat","handleSendMessage","id","isPinned","text","sendMessage","handleTime","time_to","time_from","date_time_to","parse","date_time_from","getFullYear","getMonth","scrollToBottom","chatContainer","ReactDOM","findDOMNode","chatArea","scrollTop","scrollHeight","activeUserUid","Fragment","renderSentTime","mql","matches","handleReceiverSidebar","togglePinned","stroke","ref","el","onSubmit","preventDefault","ReceiverProfile","receiverProfile","UserSidebar","userProfile","name","rows","maxLength","label","defaultChecked","changeStatus","window","matchMedia","Chat","sidebarDocked","sidebarOpen","userSidebar","user","onSetSidebarOpen","open","mediaQueryChanged","addListener","removeListener","Consumer","context","sidebar","docked","touch","sidebarClassName","contentClassName","pullRight","direction"],"mappings":"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","file":"static/js/106.90043f76.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, FormGroup, Input, Badge } from 'reactstrap'\r\nimport { X, Search } from 'react-feather'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  getChats,\r\n  getContactChats,\r\n  searchContacts,\r\n  markSeenAllMessages,\r\n} from '../../../redux/actions/chat/index'\r\nimport userImg from '../../../assets/img/portrait/small/avatar-s-11.jpg'\r\n\r\nclass ChatSidebar extends React.Component {\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (\r\n      props.chat.chatContacts.length !== state.chatContacts ||\r\n      props.chat.contacts.length !== state.contacts ||\r\n      props.chat.chats.length !== state.chats ||\r\n      props.chat.status !== state.status\r\n    ) {\r\n      return {\r\n        chatsContacts: props.chat.chatContacts,\r\n        contacts: props.chat.contacts,\r\n        chats: props.chat.chats,\r\n        status: props.chat.status,\r\n      }\r\n    }\r\n    // Return null if the state hasn't changed\r\n    return null\r\n  }\r\n  state = {\r\n    chatsContacts: [],\r\n    contacts: [],\r\n    messages: [],\r\n    status: null,\r\n    value: '',\r\n  }\r\n\r\n  getChatContents = () => {\r\n    this.props.getChats()\r\n    this.props.getContactChats()\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getChatContents()\r\n    this.setState({\r\n      chatsContacts: this.props.chat.chatContacts,\r\n      contacts: this.props.chat.contacts,\r\n      chats: this.props.chat.chats,\r\n      status: this.props.chat.status,\r\n    })\r\n  }\r\n\r\n  handleOnChange = (e) => {\r\n    this.setState({ value: e.target.value })\r\n    this.props.searchContacts(e.target.value)\r\n  }\r\n\r\n  render() {\r\n    const { contacts, chatsContacts, chats, status, value } = this.state\r\n    const contactsArr = value.length\r\n      ? this.props.chat.filteredContacts\r\n      : contacts\r\n    const chatsArr = value.length\r\n      ? this.props.chat.filteredChats\r\n      : chatsContacts\r\n    let renderContacts =\r\n      contactsArr.length > 0\r\n        ? contactsArr.map((contact) => (\r\n            <li\r\n              key={contact.uid}\r\n              onClick={() => {\r\n                this.props.handleActiveChat(\r\n                  contact.uid,\r\n                  contact,\r\n                  chats[contact.uid],\r\n                )\r\n                this.props.markSeenAllMessages(contact.uid)\r\n                this.props.mainSidebar(false)\r\n              }}\r\n            >\r\n              <div className=\"pr-1\">\r\n                <span className=\"avatar avatar-md m-0\">\r\n                  <img\r\n                    src={contact.photoURL}\r\n                    alt={contact.displayName}\r\n                    height=\"38\"\r\n                    width=\"38\"\r\n                  />\r\n                </span>\r\n              </div>\r\n              <div className=\"user-chat-info\">\r\n                <div className=\"contact-info\">\r\n                  <h5 className=\"text-bold-600 mb-0\">{contact.displayName}</h5>\r\n                  <p className=\"truncate\">{contact.about}</p>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          ))\r\n        : null\r\n    let renderChats =\r\n      chatsArr && Array.isArray(chatsArr)\r\n        ? chatsArr.map((chat) => {\r\n            let lastMsg =\r\n                chats[chat.uid] && chats[chat.uid].msg\r\n                  ? chats[chat.uid].msg.slice(-1)[0]\r\n                  : null,\r\n              lastMsgDate = new Date(\r\n                lastMsg && lastMsg.time ? lastMsg.time : null,\r\n              ),\r\n              lastMsgMonth = lastMsgDate.toLocaleString('default', {\r\n                month: 'short',\r\n              }),\r\n              lastMsgDay = lastMsgDate.getDate()\r\n            let pendingMsg =\r\n              chats[chat.uid] && chats[chat.uid].msg\r\n                ? chats[chat.uid].msg.filter(\r\n                    (i) => i.isSeen === false && i.isSent !== true,\r\n                  ).length\r\n                : null\r\n            let activeID =\r\n              chats[chat.uid] !== undefined ? chats[chat.uid] : null\r\n            return (\r\n              <li\r\n                key={chat.uid}\r\n                onClick={() => {\r\n                  this.props.handleActiveChat(chat.uid, chat, activeID)\r\n                  this.props.mainSidebar(false)\r\n                  this.props.markSeenAllMessages(chat.uid)\r\n                }}\r\n                className={`${\r\n                  this.props.activeChatID === chat.uid ? 'active' : ''\r\n                }`}\r\n              >\r\n                <div className=\"pr-1\">\r\n                  <span className=\"avatar avatar-md m-0\">\r\n                    <img\r\n                      src={chat.photoURL}\r\n                      alt={chat.displayName}\r\n                      height=\"38\"\r\n                      width=\"38\"\r\n                    />\r\n                  </span>\r\n                </div>\r\n                <div className=\"user-chat-info\">\r\n                  <div className=\"contact-info\">\r\n                    <h5 className=\"text-bold-600 mb-0\">{chat.displayName}</h5>\r\n                    <p className=\"truncate\">\r\n                      {lastMsg ? lastMsg.textContent : chat.about}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"contact-meta d-flex- flex-column\">\r\n                    <span className=\"float-right mb-25\">\r\n                      {lastMsgMonth + ' ' + lastMsgDay}\r\n                    </span>\r\n                    {pendingMsg > 0 ? (\r\n                      <div className=\"unseen-msg\">\r\n                        <Badge\r\n                          className=\"badge-md float-right\"\r\n                          color=\"primary\"\r\n                          pill\r\n                        >\r\n                          {pendingMsg}\r\n                        </Badge>\r\n                      </div>\r\n                    ) : null}\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            )\r\n          })\r\n        : null\r\n    return (\r\n      <Card className=\"sidebar-content h-100\">\r\n        <span\r\n          className=\"sidebar-close-icon\"\r\n          onClick={() => this.props.mainSidebar(false)}\r\n        >\r\n          <X size={15} />\r\n        </span>\r\n        <div className=\"chat-fixed-search\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"sidebar-profile-toggle position-relative d-inline-flex\">\r\n              <div\r\n                className=\"avatar\"\r\n                onClick={() => this.props.handleUserSidebar('open')}\r\n              >\r\n                <img src={userImg} alt=\"User Profile\" height=\"40\" width=\"40\" />\r\n                <span\r\n                  className={\r\n                    status === 'dnd'\r\n                      ? 'avatar-status-busy'\r\n                      : status === 'away'\r\n                      ? 'avatar-status-away'\r\n                      : status === 'offline'\r\n                      ? 'avatar-status-offline'\r\n                      : 'avatar-status-online'\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n            <FormGroup className=\"position-relative has-icon-left mx-1 my-0 w-100\">\r\n              <Input\r\n                className=\"round\"\r\n                type=\"text\"\r\n                placeholder=\"Search contact or start a new chat\"\r\n                onChange={(e) => this.handleOnChange(e)}\r\n                value={value}\r\n              />\r\n              <div className=\"form-control-position\">\r\n                <Search size={15} />\r\n              </div>\r\n            </FormGroup>\r\n          </div>\r\n        </div>\r\n        <PerfectScrollbar\r\n          className=\"chat-user-list list-group\"\r\n          options={{\r\n            wheelPropagation: false,\r\n          }}\r\n        >\r\n          <h3 className=\"primary p-1 mb-0\">Chats</h3>\r\n          <ul className=\"chat-users-list-wrapper media-list\">{renderChats}</ul>\r\n          <h3 className=\"primary p-1 mb-0\">Contacts</h3>\r\n          <ul className=\"chat-users-list-wrapper media-list\">\r\n            {renderContacts}\r\n          </ul>\r\n        </PerfectScrollbar>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    chat: state.chatApp.chats,\r\n  }\r\n}\r\nexport default connect(mapStateToProps, {\r\n  getChats,\r\n  getContactChats,\r\n  searchContacts,\r\n  markSeenAllMessages,\r\n})(ChatSidebar)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Input, Button } from \"reactstrap\"\r\nimport { MessageSquare, Menu, Star, Send } from \"react-feather\"\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\r\nimport { connect } from \"react-redux\"\r\nimport { togglePinned, sendMessage } from \"../../../redux/actions/chat/index\"\r\nimport userImg from \"../../../assets/img/portrait/small/avatar-s-11.jpg\"\r\n\r\nclass ChatLog extends React.Component {\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (\r\n      props.activeUser !== state.activeChat ||\r\n      props.activeChat !== state.activeChat\r\n    ) {\r\n      return {\r\n        activeUser: props.activeUser,\r\n        activeChat: props.activeChat\r\n      }\r\n    }\r\n    // Return null if the state hasn't changed\r\n    return null\r\n  }\r\n  state = {\r\n    msg: \"\",\r\n    activeUser: null,\r\n    activeChat: null\r\n  }\r\n\r\n  handleSendMessage = (id, isPinned, text) => {\r\n    if (text.length > 0) {\r\n      this.props.sendMessage(id, isPinned, text)\r\n      this.setState({\r\n        msg: \"\"\r\n      })\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.scrollToBottom()\r\n  }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom()\r\n  }\r\n\r\n  handleTime = (time_to, time_from) => {\r\n    const date_time_to = new Date(Date.parse(time_to))\r\n    const date_time_from = new Date(Date.parse(time_from))\r\n    return (\r\n      date_time_to.getFullYear() === date_time_from.getFullYear() &&\r\n      date_time_to.getMonth() === date_time_from.getMonth() &&\r\n      date_time_to.getDate() === date_time_from.getDate()\r\n    )\r\n  }\r\n\r\n  scrollToBottom = () => {\r\n    const chatContainer = ReactDOM.findDOMNode(this.chatArea)\r\n    chatContainer.scrollTop = chatContainer.scrollHeight\r\n  }\r\n\r\n  render() {\r\n    const { activeUser } = this.state\r\n    let activeUserUid = activeUser && activeUser.uid ? activeUser.uid : null,\r\n      activeChat =\r\n        activeUser && activeUser.uid\r\n          ? this.props.chat.chats[activeUserUid]\r\n          : null\r\n\r\n    let renderChats =\r\n      activeChat && activeChat !== undefined && activeChat.msg\r\n        ? activeChat.msg.map((chat, i) => {\r\n            let renderSentTime = () => {\r\n              if (\r\n                i > 0 &&\r\n                !this.handleTime(chat.time, activeChat.msg[i - 1].time)\r\n              ) {\r\n                return (\r\n                  <div className=\"divider\">\r\n                    <div className=\"divider-text\">\r\n                      {new Date().getDate() +\r\n                        \" \" +\r\n                        new Date().toLocaleString(\"default\", {\r\n                          month: \"short\"\r\n                        })}\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }\r\n            }\r\n            let renderAvatar = () => {\r\n              if (i > 0) {\r\n                if (\r\n                  chat.isSent === true &&\r\n                  activeChat.msg[i - 1].isSent !== true\r\n                ) {\r\n                  return (\r\n                    <div className=\"chat-avatar\">\r\n                      <div className=\"avatar m-0\">\r\n                        <img\r\n                          src={userImg}\r\n                          alt=\"chat avatar\"\r\n                          height=\"40\"\r\n                          width=\"40\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  )\r\n                } else if (chat.isSent !== true) {\r\n                  return (\r\n                    <div className=\"chat-avatar\">\r\n                      <div className=\"avatar m-0\">\r\n                        <img\r\n                          src={activeUser.photoURL}\r\n                          alt=\"chat avatar\"\r\n                          height=\"40\"\r\n                          width=\"40\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  )\r\n                } else {\r\n                  return \"\"\r\n                }\r\n              } else {\r\n                return (\r\n                  <div className=\"chat-avatar\">\r\n                    <div className=\"avatar m-0\">\r\n                      <img\r\n                        src={chat.isSent ? userImg : activeUser.photoURL}\r\n                        alt=\"chat avatar\"\r\n                        height=\"40\"\r\n                        width=\"40\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }\r\n            }\r\n            return (\r\n              <React.Fragment key={i}>\r\n                {renderSentTime()}\r\n                <div\r\n                  className={`chat ${\r\n                    chat.isSent !== true ? \"chat-left\" : \"chat-right\"\r\n                  }`}>\r\n                  {renderAvatar()}\r\n                  <div className=\"chat-body\">\r\n                    <div className=\"chat-content\">{chat.textContent}</div>\r\n                  </div>\r\n                </div>\r\n              </React.Fragment>\r\n            )\r\n          })\r\n        : null\r\n\r\n    return (\r\n      <div className=\"content-right\">\r\n        <div className=\"chat-app-window\">\r\n          <div\r\n            className={`start-chat-area ${\r\n              activeUser !== null ? \"d-none\" : \"d-flex\"\r\n            }`}>\r\n            <span className=\"mb-1 start-chat-icon\">\r\n              <MessageSquare size={50} />\r\n            </span>\r\n            <h4\r\n              className=\"py-50 px-1 sidebar-toggle start-chat-text\"\r\n              onClick={() => {\r\n                if (this.props.mql.matches === false) {\r\n                  this.props.mainSidebar(true)\r\n                } else {\r\n                  return null\r\n                }\r\n              }}>\r\n              Start Conversation\r\n            </h4>\r\n          </div>\r\n          <div\r\n            className={`active-chat ${\r\n              activeUser === null ? \"d-none\" : \"d-block\"\r\n            }`}>\r\n            <div className=\"chat_navbar\">\r\n              <header className=\"chat_header d-flex justify-content-between align-items-center p-1\">\r\n                <div className=\"d-flex align-items-center\">\r\n                  <div\r\n                    className=\"sidebar-toggle d-block d-lg-none mr-1\"\r\n                    onClick={() => this.props.mainSidebar(true)}>\r\n                    <Menu size={24} />\r\n                  </div>\r\n                  <div\r\n                    className=\"avatar user-profile-toggle m-0 m-0 mr-1\"\r\n                    onClick={() => this.props.handleReceiverSidebar(\"open\")}>\r\n                    <img\r\n                      src={activeUser !== null ? activeUser.photoURL : \"\"}\r\n                      alt={activeUser !== null ? activeUser.displayName : \"\"}\r\n                      height=\"40\"\r\n                      width=\"40\"\r\n                    />\r\n                    <span\r\n                      className={`\r\n                    ${\r\n                      activeUser !== null &&\r\n                      activeUser.status === \"do not disturb\"\r\n                        ? \"avatar-status-busy\"\r\n                        : activeUser !== null && activeUser.status === \"away\"\r\n                        ? \"avatar-status-away\"\r\n                        : activeUser !== null && activeUser.status === \"offline\"\r\n                        ? \"avatar-status-offline\"\r\n                        : \"avatar-status-online\"\r\n                    }\r\n                    `}\r\n                    />\r\n                  </div>\r\n                  <h6 className=\"mb-0\">\r\n                    {activeUser !== null ? activeUser.displayName : \"\"}\r\n                  </h6>\r\n                </div>\r\n                <span\r\n                  className=\"favorite\"\r\n                  onClick={() => {\r\n                    if (activeChat) {\r\n                      this.props.togglePinned(\r\n                        activeUser.uid,\r\n                        !activeChat.isPinned\r\n                      )\r\n                    }\r\n                  }}>\r\n                  <Star\r\n                    size={22}\r\n                    stroke={\r\n                      activeChat && activeChat.isPinned === true\r\n                        ? \"#FF9F43\"\r\n                        : \"#626262\"\r\n                    }\r\n                  />\r\n                </span>\r\n              </header>\r\n            </div>\r\n            <PerfectScrollbar\r\n              className=\"user-chats\"\r\n              options={{\r\n                wheelPropagation: false\r\n              }}\r\n              ref={el => {\r\n                this.chatArea = el\r\n              }}>\r\n              <div className=\"chats\">{renderChats}</div>\r\n            </PerfectScrollbar>\r\n            <div className=\"chat-app-form\">\r\n              <form\r\n                className=\"chat-app-input d-flex align-items-center\"\r\n                onSubmit={e => {\r\n                  e.preventDefault()\r\n                  this.handleSendMessage(\r\n                    activeUser.uid,\r\n                    false,\r\n                    this.state.msg,\r\n                    activeUser\r\n                  )\r\n                }}>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"message mr-1 ml-50\"\r\n                  placeholder=\"Type your message\"\r\n                  value={this.state.msg}\r\n                  onChange={e => {\r\n                    e.preventDefault()\r\n                    this.setState({\r\n                      msg: e.target.value\r\n                    })\r\n                  }}\r\n                />\r\n                <Button color=\"primary\">\r\n                  <Send className=\"d-lg-none\" size={15} />\r\n                  <span className=\"d-lg-block d-none\">Send</span>\r\n                </Button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    chat: state.chatApp.chats\r\n  }\r\n}\r\nexport default connect(mapStateToProps, { togglePinned, sendMessage })(ChatLog)\r\n","import React from \"react\"\r\nimport { X } from \"react-feather\"\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\r\nclass ReceiverProfile extends React.Component {\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.activeUser !== state.activeUser) {\r\n      return {\r\n        activeUser: props.activeUser\r\n      }\r\n    }\r\n    // Return null if the state hasn't changed\r\n    return null\r\n  }\r\n  state = {\r\n    activeUser: null\r\n  }\r\n\r\n  render() {\r\n    const { activeUser } = this.state\r\n    return (\r\n      <div\r\n        className={`user-profile-sidebar ${\r\n          this.props.receiverProfile ? \"show\" : null\r\n        }`}\r\n      >\r\n        <header className=\"user-profile-header\">\r\n          <span\r\n            className=\"close-icon\"\r\n            onClick={() => this.props.handleReceiverSidebar(\"close\")}\r\n          >\r\n            <X size={24} />\r\n          </span>\r\n          <div className=\"header-profile-sidebar\">\r\n            <div className=\"avatar\">\r\n              <img\r\n                src={activeUser !== null ? activeUser.photoURL : null}\r\n                alt={activeUser !== null ? activeUser.displayName : null}\r\n                height=\"66\"\r\n                width=\"66\"\r\n              />\r\n              <span\r\n                className={`${\r\n                  activeUser !== null && activeUser.status === \"do not disturb\"\r\n                    ? \"avatar-status-busy\"\r\n                    : activeUser !== null && activeUser.status === \"away\"\r\n                    ? \"avatar-status-away\"\r\n                    : activeUser !== null && activeUser.status === \"offline\"\r\n                    ? \"avatar-status-offline\"\r\n                    : \"avatar-status-online\"\r\n                } avatar-status-lg`}\r\n              />\r\n            </div>\r\n            <h4 className=\"chat-user-name\">\r\n              {activeUser !== null ? activeUser.displayName : null}\r\n            </h4>\r\n          </div>\r\n        </header>\r\n        <PerfectScrollbar\r\n          className=\"user-profile-sidebar-area p-2\"\r\n          options={{\r\n            wheelPropagation: false\r\n          }}\r\n        >\r\n          <h6>About</h6>\r\n          <p>{activeUser !== null ? activeUser.about : null}</p>\r\n        </PerfectScrollbar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default ReceiverProfile\r\n","import React from \"react\"\r\nimport { X } from \"react-feather\"\r\nimport { Input } from \"reactstrap\"\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\r\nimport { connect } from \"react-redux\"\r\nimport { changeStatus } from \"../../../redux/actions/chat/index\"\r\nimport Radio from \"../../../components/@vuexy/radio/RadioVuexy\"\r\nimport userImg from \"../../../assets/img/portrait/small/avatar-s-11.jpg\"\r\nclass UserSidebar extends React.Component {\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.chat.status !== state.status) {\r\n      return {\r\n        status: props.chat.status\r\n      }\r\n    }\r\n    // Return null if the state hasn't changed\r\n    return null\r\n  }\r\n\r\n  state = {\r\n    value:\r\n      \"Dessert chocolate cake lemon drops jujubes. Biscuit cupcake ice cream bear claw brownie brownie marshmallow.\",\r\n    status: null\r\n  }\r\n\r\n  render() {\r\n    const status = this.state.status\r\n    return (\r\n      <div\r\n        className={`chat-profile-sidebar ${\r\n          this.props.userProfile ? \"show\" : null\r\n        }`}\r\n      >\r\n        <header className=\"chat-profile-header\">\r\n          <div\r\n            className=\"close-icon\"\r\n            onClick={() => this.props.handleUserSidebar(\"close\")}\r\n          >\r\n            <X size={24} />\r\n          </div>\r\n          <div className=\"header-profile-sidebar\">\r\n            <div className=\"avatar\">\r\n              <img src={userImg} alt=\"User Profile\" height=\"66\" width=\"66\" />\r\n              <span\r\n                className={`${\r\n                  status === \"offline\"\r\n                    ? \"avatar-status-offline\"\r\n                    : status === \"dnd\"\r\n                    ? \"avatar-status-busy\"\r\n                    : status === \"away\"\r\n                    ? \"avatar-status-away\"\r\n                    : \"avatar-status-online\"\r\n                } avatar-status-lg`}\r\n              />\r\n            </div>\r\n            <h4 className=\"chat-user-name\">John Doe</h4>\r\n          </div>\r\n        </header>\r\n        <div className=\"profile-sidebar-area\">\r\n          <PerfectScrollbar\r\n            className=\"scroll-area\"\r\n            options={{\r\n              wheelPropagation: false\r\n            }}\r\n          >\r\n            <h6>About</h6>\r\n            <div className=\"about-user\">\r\n              <Input\r\n                type=\"textarea\"\r\n                name=\"text\"\r\n                id=\"userAbout\"\r\n                rows=\"5\"\r\n                value={this.state.value}\r\n                maxLength=\"120\"\r\n                onChange={e => this.setState({ value: e.target.value })}\r\n              />\r\n              <small className=\"counter-value float-right\">\r\n                {`${this.state.value.length} / 120`}\r\n              </small>\r\n            </div>\r\n            <h3 className=\"mt-3\">Status</h3>\r\n            <ul className=\"list-unstyled user-status mb-0\">\r\n              <li className=\"pb-50\">\r\n                <Radio\r\n                  label=\"Active\"\r\n                  color=\"success\"\r\n                  defaultChecked={true}\r\n                  name=\"userStatus\"\r\n                  onClick={() => this.props.changeStatus(\"active\")}\r\n                />\r\n              </li>\r\n              <li className=\"pb-50\">\r\n                <Radio\r\n                  label=\"Do Not Disturb\"\r\n                  color=\"danger\"\r\n                  defaultChecked={false}\r\n                  name=\"userStatus\"\r\n                  onClick={() => this.props.changeStatus(\"dnd\")}\r\n                />\r\n              </li>\r\n              <li className=\"pb-50\">\r\n                <Radio\r\n                  label=\"Away\"\r\n                  color=\"warning\"\r\n                  defaultChecked={false}\r\n                  name=\"userStatus\"\r\n                  onClick={() => this.props.changeStatus(\"away\")}\r\n                />\r\n              </li>\r\n              <li className=\"pb-50\">\r\n                <Radio\r\n                  label=\"Offline\"\r\n                  color=\"secondary\"\r\n                  defaultChecked={false}\r\n                  name=\"userStatus\"\r\n                  onClick={() => this.props.changeStatus(\"offline\")}\r\n                />\r\n              </li>\r\n            </ul>\r\n          </PerfectScrollbar>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    chat: state.chatApp.chats\r\n  }\r\n}\r\nexport default connect(mapStateToProps, { changeStatus })(UserSidebar)\r\n","import React from \"react\"\r\nimport Sidebar from \"react-sidebar\"\r\nimport { ContextLayout } from \"../../../utility/context/Layout\"\r\nimport ChatSidebarContent from \"./ChatSidebar\"\r\nimport ChatLog from \"./ChatLog\"\r\nimport ReceiverSidebar from \"./receiverProfile\"\r\nimport UserSidebar from \"./UserSidebar\"\r\nimport \"../../../assets/scss/pages/app-chat.scss\"\r\nconst mql = window.matchMedia(`(min-width: 992px)`)\r\n\r\nclass Chat extends React.Component {\r\n  state = {\r\n    userProfile: false,\r\n    sidebarDocked: mql.matches,\r\n    sidebarOpen: false,\r\n    activeChatID: null,\r\n    activeChat: null,\r\n    activeUser: null,\r\n    receiverProfile: false,\r\n    userSidebar: false\r\n  }\r\n  // mounted = false\r\n  handleUserSidebar = status => {\r\n    if (status === \"open\") {\r\n      this.setState({\r\n        userProfile: true\r\n      })\r\n    } else {\r\n      this.setState({\r\n        userProfile: false\r\n      })\r\n    }\r\n  }\r\n  handleActiveChat = (id, user, chats) => {\r\n    this.setState({\r\n      activeChatID: id,\r\n      activeUser: user,\r\n      activeChat: chats\r\n    })\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    mql.addListener(this.mediaQueryChanged)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    mql.removeListener(this.mediaQueryChanged)\r\n  }\r\n\r\n  onSetSidebarOpen = open => {\r\n    this.setState({ sidebarOpen: open })\r\n  }\r\n\r\n  mediaQueryChanged = () => {\r\n    this.setState({ sidebarDocked: mql.matches, sidebarOpen: false })\r\n  }\r\n\r\n  handleReceiverSidebar = status => {\r\n    status === \"open\"\r\n      ? this.setState({\r\n          receiverProfile: true\r\n        })\r\n      : this.setState({\r\n          receiverProfile: false\r\n        })\r\n  }\r\n\r\n  handleUserSidebar = status => {\r\n    status === \"open\"\r\n      ? this.setState({\r\n          userSidebar: true\r\n        })\r\n      : this.setState({\r\n          userSidebar: false\r\n        })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"chat-application position-relative\">\r\n        <div\r\n          className={`chat-overlay ${\r\n            this.state.receiverProfile ||\r\n            this.state.userSidebar ||\r\n            this.state.sidebarOpen\r\n              ? \"show\"\r\n              : \"d-none\"\r\n          }`}\r\n          onClick={() => {\r\n            this.handleReceiverSidebar(\"close\")\r\n            this.handleUserSidebar(\"close\")\r\n            this.onSetSidebarOpen(false)\r\n          }}\r\n        />\r\n        <ContextLayout.Consumer>\r\n          {context => (\r\n            <Sidebar\r\n              sidebar={\r\n                <ChatSidebarContent\r\n                  activeChatID={this.state.activeChatID}\r\n                  handleActiveChat={this.handleActiveChat}\r\n                  handleUserSidebar={this.handleUserSidebar}\r\n                  mainSidebar={this.onSetSidebarOpen}\r\n                />\r\n              }\r\n              docked={this.state.sidebarDocked}\r\n              open={this.state.sidebarOpen}\r\n              touch={false}\r\n              sidebarClassName=\"chat-sidebar\"\r\n              contentClassName=\"sidebar-children d-none\"\r\n              pullRight={context.state.direction === \"rtl\"}>\r\n              \"\"\r\n            </Sidebar>\r\n          )}\r\n        </ContextLayout.Consumer>\r\n        <UserSidebar\r\n          userProfile={this.state.userSidebar}\r\n          handleUserSidebar={this.handleUserSidebar}\r\n        />\r\n        <ChatLog\r\n          activeChat={this.state.activeChat}\r\n          activeUser={this.state.activeUser}\r\n          handleReceiverSidebar={this.handleReceiverSidebar}\r\n          mainSidebar={this.onSetSidebarOpen}\r\n          mql={mql}\r\n          handleActiveChat={this.handleActiveChat}\r\n        />\r\n        <ReceiverSidebar\r\n          activeUser={this.state.activeUser}\r\n          receiverProfile={this.state.receiverProfile}\r\n          handleReceiverSidebar={this.handleReceiverSidebar}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chat\r\n"],"sourceRoot":""}