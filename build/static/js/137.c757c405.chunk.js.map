{"version":3,"sources":["views/apps/chat/ChatLog.js","../node_modules/reactstrap/es/Input.js","redux/actions/chat/index.js"],"names":["ChatLog","state","msg","activeUser","activeChat","handleSendMessage","id","isPinned","text","length","props","sendMessage","setState","handleTime","time_to","time_from","date_time_to","Date","parse","date_time_from","getFullYear","getMonth","getDate","scrollToBottom","chatContainer","ReactDOM","findDOMNode","chatArea","scrollTop","scrollHeight","this","activeUserUid","uid","chat","chats","renderChats","undefined","map","i","Fragment","key","time","className","toLocaleString","month","renderSentTime","isSent","src","userImg","alt","height","width","photoURL","textContent","size","onClick","mql","matches","mainSidebar","handleReceiverSidebar","displayName","status","togglePinned","stroke","options","wheelPropagation","ref","el","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","color","React","Component","connect","chatApp","_excluded","propTypes","children","PropTypes","node","string","oneOfType","number","bsSize","valid","bool","invalid","tag","tagPropType","innerRef","object","func","plaintext","addon","cssModule","Input","_React$Component","_this","call","getRef","bind","_assertThisInitialized","focus","_inheritsLoose","_proto","prototype","render","_this$props","attributes","_objectWithoutPropertiesLoose","checkInput","indexOf","isNotaNumber","RegExp","Tag","formControlClass","test","warnOnce","classes","mapToCssModules","classNames","createElement","_extends","defaultProps","getChats","dispatch","axios","get","then","response","contacts","data","catch","err","console","log","getContactChats","post","contactId","newMsg","isSeen","toString","message","changeStatus","searchContacts","query","markSeenAllMessages"],"mappings":"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","file":"static/js/137.c757c405.chunk.js","sourcesContent":["import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Input, Button } from \"reactstrap\"\r\nimport { MessageSquare, Menu, Star, Send } from \"react-feather\"\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\r\nimport { connect } from \"react-redux\"\r\nimport { togglePinned, sendMessage } from \"../../../redux/actions/chat/index\"\r\nimport userImg from \"../../../assets/img/portrait/small/avatar-s-11.jpg\"\r\n\r\nclass ChatLog extends React.Component {\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (\r\n      props.activeUser !== state.activeChat ||\r\n      props.activeChat !== state.activeChat\r\n    ) {\r\n      return {\r\n        activeUser: props.activeUser,\r\n        activeChat: props.activeChat\r\n      }\r\n    }\r\n    // Return null if the state hasn't changed\r\n    return null\r\n  }\r\n  state = {\r\n    msg: \"\",\r\n    activeUser: null,\r\n    activeChat: null\r\n  }\r\n\r\n  handleSendMessage = (id, isPinned, text) => {\r\n    if (text.length > 0) {\r\n      this.props.sendMessage(id, isPinned, text)\r\n      this.setState({\r\n        msg: \"\"\r\n      })\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.scrollToBottom()\r\n  }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom()\r\n  }\r\n\r\n  handleTime = (time_to, time_from) => {\r\n    const date_time_to = new Date(Date.parse(time_to))\r\n    const date_time_from = new Date(Date.parse(time_from))\r\n    return (\r\n      date_time_to.getFullYear() === date_time_from.getFullYear() &&\r\n      date_time_to.getMonth() === date_time_from.getMonth() &&\r\n      date_time_to.getDate() === date_time_from.getDate()\r\n    )\r\n  }\r\n\r\n  scrollToBottom = () => {\r\n    const chatContainer = ReactDOM.findDOMNode(this.chatArea)\r\n    chatContainer.scrollTop = chatContainer.scrollHeight\r\n  }\r\n\r\n  render() {\r\n    const { activeUser } = this.state\r\n    let activeUserUid = activeUser && activeUser.uid ? activeUser.uid : null,\r\n      activeChat =\r\n        activeUser && activeUser.uid\r\n          ? this.props.chat.chats[activeUserUid]\r\n          : null\r\n\r\n    let renderChats =\r\n      activeChat && activeChat !== undefined && activeChat.msg\r\n        ? activeChat.msg.map((chat, i) => {\r\n            let renderSentTime = () => {\r\n              if (\r\n                i > 0 &&\r\n                !this.handleTime(chat.time, activeChat.msg[i - 1].time)\r\n              ) {\r\n                return (\r\n                  <div className=\"divider\">\r\n                    <div className=\"divider-text\">\r\n                      {new Date().getDate() +\r\n                        \" \" +\r\n                        new Date().toLocaleString(\"default\", {\r\n                          month: \"short\"\r\n                        })}\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }\r\n            }\r\n            let renderAvatar = () => {\r\n              if (i > 0) {\r\n                if (\r\n                  chat.isSent === true &&\r\n                  activeChat.msg[i - 1].isSent !== true\r\n                ) {\r\n                  return (\r\n                    <div className=\"chat-avatar\">\r\n                      <div className=\"avatar m-0\">\r\n                        <img\r\n                          src={userImg}\r\n                          alt=\"chat avatar\"\r\n                          height=\"40\"\r\n                          width=\"40\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  )\r\n                } else if (chat.isSent !== true) {\r\n                  return (\r\n                    <div className=\"chat-avatar\">\r\n                      <div className=\"avatar m-0\">\r\n                        <img\r\n                          src={activeUser.photoURL}\r\n                          alt=\"chat avatar\"\r\n                          height=\"40\"\r\n                          width=\"40\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  )\r\n                } else {\r\n                  return \"\"\r\n                }\r\n              } else {\r\n                return (\r\n                  <div className=\"chat-avatar\">\r\n                    <div className=\"avatar m-0\">\r\n                      <img\r\n                        src={chat.isSent ? userImg : activeUser.photoURL}\r\n                        alt=\"chat avatar\"\r\n                        height=\"40\"\r\n                        width=\"40\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }\r\n            }\r\n            return (\r\n              <React.Fragment key={i}>\r\n                {renderSentTime()}\r\n                <div\r\n                  className={`chat ${\r\n                    chat.isSent !== true ? \"chat-left\" : \"chat-right\"\r\n                  }`}>\r\n                  {renderAvatar()}\r\n                  <div className=\"chat-body\">\r\n                    <div className=\"chat-content\">{chat.textContent}</div>\r\n                  </div>\r\n                </div>\r\n              </React.Fragment>\r\n            )\r\n          })\r\n        : null\r\n\r\n    return (\r\n      <div className=\"content-right\">\r\n        <div className=\"chat-app-window\">\r\n          <div\r\n            className={`start-chat-area ${\r\n              activeUser !== null ? \"d-none\" : \"d-flex\"\r\n            }`}>\r\n            <span className=\"mb-1 start-chat-icon\">\r\n              <MessageSquare size={50} />\r\n            </span>\r\n            <h4\r\n              className=\"py-50 px-1 sidebar-toggle start-chat-text\"\r\n              onClick={() => {\r\n                if (this.props.mql.matches === false) {\r\n                  this.props.mainSidebar(true)\r\n                } else {\r\n                  return null\r\n                }\r\n              }}>\r\n              Start Conversation\r\n            </h4>\r\n          </div>\r\n          <div\r\n            className={`active-chat ${\r\n              activeUser === null ? \"d-none\" : \"d-block\"\r\n            }`}>\r\n            <div className=\"chat_navbar\">\r\n              <header className=\"chat_header d-flex justify-content-between align-items-center p-1\">\r\n                <div className=\"d-flex align-items-center\">\r\n                  <div\r\n                    className=\"sidebar-toggle d-block d-lg-none mr-1\"\r\n                    onClick={() => this.props.mainSidebar(true)}>\r\n                    <Menu size={24} />\r\n                  </div>\r\n                  <div\r\n                    className=\"avatar user-profile-toggle m-0 m-0 mr-1\"\r\n                    onClick={() => this.props.handleReceiverSidebar(\"open\")}>\r\n                    <img\r\n                      src={activeUser !== null ? activeUser.photoURL : \"\"}\r\n                      alt={activeUser !== null ? activeUser.displayName : \"\"}\r\n                      height=\"40\"\r\n                      width=\"40\"\r\n                    />\r\n                    <span\r\n                      className={`\r\n                    ${\r\n                      activeUser !== null &&\r\n                      activeUser.status === \"do not disturb\"\r\n                        ? \"avatar-status-busy\"\r\n                        : activeUser !== null && activeUser.status === \"away\"\r\n                        ? \"avatar-status-away\"\r\n                        : activeUser !== null && activeUser.status === \"offline\"\r\n                        ? \"avatar-status-offline\"\r\n                        : \"avatar-status-online\"\r\n                    }\r\n                    `}\r\n                    />\r\n                  </div>\r\n                  <h6 className=\"mb-0\">\r\n                    {activeUser !== null ? activeUser.displayName : \"\"}\r\n                  </h6>\r\n                </div>\r\n                <span\r\n                  className=\"favorite\"\r\n                  onClick={() => {\r\n                    if (activeChat) {\r\n                      this.props.togglePinned(\r\n                        activeUser.uid,\r\n                        !activeChat.isPinned\r\n                      )\r\n                    }\r\n                  }}>\r\n                  <Star\r\n                    size={22}\r\n                    stroke={\r\n                      activeChat && activeChat.isPinned === true\r\n                        ? \"#FF9F43\"\r\n                        : \"#626262\"\r\n                    }\r\n                  />\r\n                </span>\r\n              </header>\r\n            </div>\r\n            <PerfectScrollbar\r\n              className=\"user-chats\"\r\n              options={{\r\n                wheelPropagation: false\r\n              }}\r\n              ref={el => {\r\n                this.chatArea = el\r\n              }}>\r\n              <div className=\"chats\">{renderChats}</div>\r\n            </PerfectScrollbar>\r\n            <div className=\"chat-app-form\">\r\n              <form\r\n                className=\"chat-app-input d-flex align-items-center\"\r\n                onSubmit={e => {\r\n                  e.preventDefault()\r\n                  this.handleSendMessage(\r\n                    activeUser.uid,\r\n                    false,\r\n                    this.state.msg,\r\n                    activeUser\r\n                  )\r\n                }}>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"message mr-1 ml-50\"\r\n                  placeholder=\"Type your message\"\r\n                  value={this.state.msg}\r\n                  onChange={e => {\r\n                    e.preventDefault()\r\n                    this.setState({\r\n                      msg: e.target.value\r\n                    })\r\n                  }}\r\n                />\r\n                <Button color=\"primary\">\r\n                  <Send className=\"d-lg-none\" size={15} />\r\n                  <span className=\"d-lg-block d-none\">Send</span>\r\n                </Button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    chat: state.chatApp.chats\r\n  }\r\n}\r\nexport default connect(mapStateToProps, { togglePinned, sendMessage })(ChatLog)\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"type\", \"bsSize\", \"valid\", \"invalid\", \"tag\", \"addon\", \"plaintext\", \"innerRef\"];\n\n/* eslint react/prefer-stateless-function: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, warnOnce, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  type: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  bsSize: PropTypes.string,\n  valid: PropTypes.bool,\n  invalid: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  plaintext: PropTypes.bool,\n  addon: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  type: 'text'\n};\n\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Input, _React$Component);\n\n  function Input(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Input.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.focus = function focus() {\n    if (this.ref) {\n      this.ref.focus();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        type = _this$props.type,\n        bsSize = _this$props.bsSize,\n        valid = _this$props.valid,\n        invalid = _this$props.invalid,\n        tag = _this$props.tag,\n        addon = _this$props.addon,\n        plaintext = _this$props.plaintext,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    var checkInput = ['radio', 'checkbox'].indexOf(type) > -1;\n    var isNotaNumber = new RegExp('\\\\D', 'g');\n    var fileInput = type === 'file';\n    var textareaInput = type === 'textarea';\n    var selectInput = type === 'select';\n    var rangeInput = type === 'range';\n    var Tag = tag || (selectInput || textareaInput ? type : 'input');\n    var formControlClass = 'form-control';\n\n    if (plaintext) {\n      formControlClass = formControlClass + \"-plaintext\";\n      Tag = tag || 'input';\n    } else if (fileInput) {\n      formControlClass = formControlClass + \"-file\";\n    } else if (rangeInput) {\n      formControlClass = formControlClass + \"-range\";\n    } else if (checkInput) {\n      if (addon) {\n        formControlClass = null;\n      } else {\n        formControlClass = 'form-check-input';\n      }\n    }\n\n    if (attributes.size && isNotaNumber.test(attributes.size)) {\n      warnOnce('Please use the prop \"bsSize\" instead of the \"size\" to bootstrap\\'s input sizing.');\n      bsSize = attributes.size;\n      delete attributes.size;\n    }\n\n    var classes = mapToCssModules(classNames(className, invalid && 'is-invalid', valid && 'is-valid', bsSize ? \"form-control-\" + bsSize : false, formControlClass), cssModule);\n\n    if (Tag === 'input' || tag && typeof tag === 'function') {\n      attributes.type = type;\n    }\n\n    if (attributes.children && !(plaintext || type === 'select' || typeof Tag !== 'string' || Tag === 'select')) {\n      warnOnce(\"Input with a type of \\\"\" + type + \"\\\" cannot have children. Please use \\\"value\\\"/\\\"defaultValue\\\" instead.\");\n      delete attributes.children;\n    }\n\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes,\n      \"aria-invalid\": invalid\n    }));\n  };\n\n  return Input;\n}(React.Component);\n\nInput.propTypes = propTypes;\nInput.defaultProps = defaultProps;\nexport default Input;","import axios from \"axios\"\r\n\r\nexport const getChats = () => {\r\n  return dispatch => {\r\n    axios\r\n      .get(\"api/app/chat/chats\")\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"GET_CONTACTS\",\r\n          contacts: response.data.contacts,\r\n          chats: response.data.chats\r\n        })\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n}\r\n\r\nexport const getContactChats = () => {\r\n  return dispatch => {\r\n    axios\r\n      .get(\"api/app/chat/chat-contacts\")\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"GET_CHAT_CONTACTS\",\r\n          chats: response.data\r\n        })\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n}\r\n\r\nexport const togglePinned = (id, value) => {\r\n  return dispatch => {\r\n    axios\r\n      .post(\"/api/apps/chat/set-pinned/\", {\r\n        contactId: id,\r\n        value\r\n      })\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"SET_PINNED\",\r\n          id,\r\n          value\r\n        })\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n}\r\n\r\nexport const sendMessage = (id, isPinned, text) => {\r\n  if (text.length > 0) {\r\n    return dispatch => {\r\n      let newMsg = {\r\n        textContent: text,\r\n        isSent: true,\r\n        isSeen: false,\r\n        time: new Date().toString()\r\n      }\r\n      axios\r\n        .post(\"/api/app/chat/send-message\", {\r\n          contactId: id,\r\n          message: newMsg,\r\n          isPinned\r\n        })\r\n        .then(response => {\r\n          dispatch({\r\n            type: \"SEND_MESSAGE\",\r\n            msg: newMsg,\r\n            id,\r\n            isPinned,\r\n            text\r\n          })\r\n          dispatch(getChats())\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n  } else {\r\n    return\r\n  }\r\n}\r\n\r\nexport const changeStatus = status => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: \"CHANGE_STATUS\",\r\n      status\r\n    })\r\n  }\r\n}\r\n\r\nexport const searchContacts = query => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: \"SEARCH_CONTACTS\",\r\n      query\r\n    })\r\n  }\r\n}\r\n\r\nexport const markSeenAllMessages = id => {\r\n  return dispatch => {\r\n    axios\r\n      .post(\"/api/apps/chat/mark-all-seen/\", {\r\n        contactId: id\r\n      })\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"MARK_AS_SEEN\",\r\n          id\r\n        })\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n}\r\n"],"sourceRoot":""}